/*
 * FlexMaestro Service
 * This is a basic FlexMaestro service, showcasing many features of a standard Twilio Service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: your-team-name@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.flexmaestro.server.api.admin;

import com.twilio.core.jersey3.auth.annotations.HostAuth;
import com.twilio.flexmaestro.server.definitions.HelloMessageList;
import com.twilio.core.security.contexts.RemoteHostContext;
import com.twilio.rest.TwilioServiceErrorResponse;
import com.twilio.concurrency.limit.annotations.AIMDConcurrencyLimited;
import io.vavr.control.Either;
import jakarta.ws.rs.container.AsyncResponse;
import com.twilio.core.request.context.RequestContext;

import com.twilio.flexmaestro.server.api.Endpoint;

import com.twilio.core.security.contexts.RemoteHostContext;
import com.twilio.core.request.context.RequestContext;



import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.Response.ResponseBuilder;

import java.util.Map;
import java.util.Objects;
import java.util.List;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.CompletableFuture;

import static java.util.Objects.nonNull;

import jakarta.validation.constraints.*;

import java.util.Optional;
import org.jvnet.hk2.annotations.Contract;

/**
* AdminApi handler code.
*/

@jakarta.annotation.Generated(value = "com.twilio.codegen.TwilioGenerator", date = "2024-04-01T17:46:14.982174+05:30[Asia/Kolkata]")
@Contract
public interface AdminApi {
  /**
   * Get the number of milliseconds to allow a request to process.
   *
   * @param operation the operation being performed
   *
   * @return number of milliseconds to process requests
   */
  default long getTimeoutMs(final String operation) {
    return 5000L;
  }
  /**
    * GET  : Reads all the messages
    * <ol>
    *    <li>Full message list (status code 200)</li>
    *    <li>Unauthorized (status code 401)</li>
    *    <li>Forbidden (status code 403)</li>
    *    <li>Internal server error (status code 500)</li>
    *    <li>Rate Limit Exceeded (status code 429)</li>
    *  </ol>
    * 
    * @param pageSize Number of results to return at once  a {@link Integer}
    * @param pageToken Opaque token describing which page of results to return  a {@link String}
    * @param remoteHostContext the authentication context  a {@link RemoteHostContext}
    * @param requestContext the request context  a {@link com.twilio.core.request.context.RequestContext}
    * @param responseHeaders a ReadMessagesResponseHeaders container to store response headers
    *
    * @return a {@link CompletionStage} of {@link Either} where left is a {@link TwilioServiceErrorResponse} and right is a {@link HelloMessageList } possible responses
    */
    default CompletionStage<Either<TwilioServiceErrorResponse, HelloMessageList>> readMessages(
        final Integer pageSize,
        final String pageToken,
        final RemoteHostContext remoteHostContext, 
        final com.twilio.core.request.context.RequestContext requestContext,
        final AdminApi.ReadMessagesResponseHeaders responseHeaders) {
        // TODO: Implement method
        return CompletableFuture.completedStage(Either.left(new TwilioServiceErrorResponse.Builder().withMessage("Method not implemented").withCode(501).withHttpStatusCode(501).build()));
    }
        
    /**
     * ReadMessagesResponseHeaders is intended as a strongly typed container for
     * all the response headers sent by the downstream.
     */
    public static final class ReadMessagesResponseHeaders {
    
    /**
     * The etag header variable, of type String.
     */
    public String etag;
    /**
     * The xRateLimitConfig header variable, of type String.
     */
    public String xRateLimitConfig;
    /**
     * The xRateLimitLimit header variable, of type String.
     */
    public String xRateLimitLimit;
    /**
     * The xRateLimitRemaining header variable, of type Integer.
     */
    public Integer xRateLimitRemaining;

    
      /**
       * The etag response header, of type String.
       *
       * @return the etag response header
       */
      public Optional<String> getEtag() { 
        return Optional.ofNullable(etag);
      }

      /**
       * Set the etag response header.
       *
       * @param etag the etag response header
       */
      public void setEtag(final String etag) {
          this.etag = etag;
      }

      /**
       * The xRateLimitConfig response header, of type String.
       *
       * @return the X-Rate-Limit-Config response header
       */
      public Optional<String> getXRateLimitConfig() { 
        return Optional.ofNullable(xRateLimitConfig);
      }

      /**
       * Set the xRateLimitConfig response header.
       *
       * @param xRateLimitConfig the xRateLimitConfig response header
       */
      public void setXRateLimitConfig(final String xRateLimitConfig) {
          this.xRateLimitConfig = xRateLimitConfig;
      }

      /**
       * The xRateLimitLimit response header, of type String.
       *
       * @return the X-Rate-Limit-Limit response header
       */
      public Optional<String> getXRateLimitLimit() { 
        return Optional.ofNullable(xRateLimitLimit);
      }

      /**
       * Set the xRateLimitLimit response header.
       *
       * @param xRateLimitLimit the xRateLimitLimit response header
       */
      public void setXRateLimitLimit(final String xRateLimitLimit) {
          this.xRateLimitLimit = xRateLimitLimit;
      }

      /**
       * The xRateLimitRemaining response header, of type Integer.
       *
       * @return the X-Rate-Limit-Remaining response header
       */
      public Optional<Integer> getXRateLimitRemaining() { 
        return Optional.ofNullable(xRateLimitRemaining);
      }

      /**
       * Set the xRateLimitRemaining response header.
       *
       * @param xRateLimitRemaining the xRateLimitRemaining response header
       */
      public void setXRateLimitRemaining(final Integer xRateLimitRemaining) {
          this.xRateLimitRemaining = xRateLimitRemaining;
      }

        /**
         * Default constructor for ReadMessagesResponseHeaders().
         */
        public ReadMessagesResponseHeaders() {
        }

        /**
         * Using the specified <code>builder</code> assign all non-empty
         * header properties.
         *
         * @param builder a {@link ResponseBuilder} add header variables to
         *
         * @return the {@link ResponseBuilder}
         */
        public ResponseBuilder addHeaders(@NotNull final ResponseBuilder builder) { 
           getEtag().ifPresent(val -> builder.header("etag", val));
           getXRateLimitConfig().ifPresent(val -> builder.header("X-Rate-Limit-Config", val));
           getXRateLimitLimit().ifPresent(val -> builder.header("X-Rate-Limit-Limit", val));
           getXRateLimitRemaining().ifPresent(val -> builder.header("X-Rate-Limit-Remaining", val));
           return builder;
       }
    }

    default ReadMessagesResponseHeaders createReadMessagesResponseHeaders() {
        return new ReadMessagesResponseHeaders();
    }}
