/*
 * FlexMaestro Service
 * This is a basic FlexMaestro service, showcasing many features of a standard Twilio Service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: your-team-name@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.twilio.flexmaestro.client;

import com.google.common.reflect.TypeToken;
import com.twilio.core.client.base.exceptions.ServiceResponseException;
import com.twilio.core.client.base.handlers.ResponseHandler;
import com.twilio.core.client.base.handlers.http.HttpSuccessPredicate;
import com.twilio.core.client.base.response.EncodedResponse;
import com.twilio.core.domain.ServiceError;
import com.twilio.core.util.transcoding.Transcoder;
import java.util.Optional;

/**
 * A {@link ResponseHandler} to decode {@link EncodedResponse responses}.
 */

@jakarta.annotation.Generated(value = "com.twilio.codegen.TwilioGenerator", date = "2024-04-01T15:05:48.196693+05:30[Asia/Kolkata]")
public final class NoopResponseHandler implements ResponseHandler<EncodedResponse> {
    /**
     * The singleton instance.
     */
    public static final NoopResponseHandler INSTANCE = new NoopResponseHandler();

    @SuppressWarnings("UnstableApiUsage")
    private static final TypeToken<EncodedResponse> ENCODED_RESPONSE_TYPE_TOKEN = TypeToken.of(EncodedResponse.class);

    /**
     * Create a new NoopResponseHandler.
     */
    protected NoopResponseHandler() {
    }

    @Override
    @SuppressWarnings("UnstableApiUsage")
    public TypeToken<EncodedResponse> getType() {
        return ENCODED_RESPONSE_TYPE_TOKEN;
    }

    @Override
    public boolean isError(final EncodedResponse response) {
        return !HttpSuccessPredicate.HTTP_SUCCESS_PREDICATE.test(response);
    }

    @Override
    public Optional<EncodedResponse> handle(final EncodedResponse response, final Transcoder transcoder) {
        if (!isError(response)) {
            return Optional.ofNullable(response);
        }
        throw new ServiceResponseException(response);
    }

    @Override
    public Optional<ServiceError> error(final EncodedResponse response, final Transcoder transcoder) {
        return Optional.empty();
    }
}
